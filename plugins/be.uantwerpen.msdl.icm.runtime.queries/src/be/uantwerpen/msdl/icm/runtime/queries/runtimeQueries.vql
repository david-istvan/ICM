/*******************************************************************************
 * Copyright (c) 2016 Istvan David
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Istvan David - initial API and implementation
 *******************************************************************************/

package be.uantwerpen.msdl.icm.runtime.queries

import "metamodels.enactment"
import "metamodels.pm"

pattern tokenInNode(token : Token, node : Node){
	Token.currentNode(token, node);
}

pattern tokenInActivity(token : Token, node : AutomatedActivity){
	find tokenInNode(token, node);
}

//to detect executable activity
pattern executableActivity(token : Token, node : AutomatedActivity){
	find tokenInActivity(token, node);
	Token.state(token, ::READY);
}

//to detect executed activity
pattern executedActivity(token : Token, node : AutomatedActivity){
	find tokenInActivity(token, node);
	Token.state(token, ::DONE);
}

//to split tokens
pattern tokenInFork(token : Token, node : Fork){
	find tokenInNode(token, node);
}

//to re-join tokens
pattern tokenInJoin(token : Token, node : Join){
	find tokenInNode(token, node);
}

//to designate the end of an execution
pattern finishedProcess(token : Token, node : FlowFinal){
	find tokenInNode(token, node);
}

//to enable moving tokens from one node to another
pattern enabledTransition(fromNode : Node, toNode : Node, token: Token){
	ControlFlow.from(controlFlow, fromNode);
	ControlFlow.to(controlFlow, toNode);
	find tokenInNode(token, fromNode);
}
//TODO this must be detailed based on the type! (Activity must be done, Join must have all the tokens, etc)